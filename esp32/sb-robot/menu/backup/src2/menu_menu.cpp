/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

// Generated for Arduino ESP32 by TcMenu 4.4.0 on 2025-02-18T16:47:52.869490Z.

#include <tcMenu.h>
#include "menu_menu.h"
#include "ThemeMonoBorderedBuilder.h"

// Global variable declarations
const PROGMEM  ConnectorLocalInfo applicationInfo = { "menu", "d0b2be89-7b80-4f3f-9ee8-7e83e5fd65e7" };
ArduinoEEPROMAbstraction glArduinoEeprom(&EEPROM);
U8G2_SH1106_128X64_NONAME_F_HW_I2C gfx(U8G2_R0, U8X8_PIN_NONE, 22, 21);
U8g2Drawable gfxDrawable(&gfx);
GraphicsDeviceRenderer renderer(30, applicationInfo.name, &gfxDrawable);

// Global Menu Item declarations
const PROGMEM AnalogMenuInfo minfoThreshold = { "Threshold", 13, 14, 255, SetThreshold, 0, 1, "Unit" };
AnalogMenuItem menuThreshold(&minfoThreshold, 0, nullptr, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoPIDInterval = { "PID interval", 8, 12, 255, SetPIDHz, 0, 1, "ms" };
AnalogMenuItem menuPIDInterval(&minfoPIDInterval, 10, &menuThreshold, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoKo = { "Ko", 7, 10, 500, SetKo, 0, 10, "" };
AnalogMenuItem menuKo(&minfoKo, 15, &menuPIDInterval, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoKd = { "Kd", 6, 8, 500, SetKd, 0, 10, "" };
AnalogMenuItem menuKd(&minfoKd, 20, &menuKo, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoKi = { "Ki", 5, 6, 500, SetKi, 0, 10, "" };
AnalogMenuItem menuKi(&minfoKi, 5, &menuKd, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoKp = { "Kp", 4, 4, 500, SetKp, 0, 10, "" };
AnalogMenuItem menuKp(&minfoKp, 200, &menuKi, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoPIDParams = { "PID params", 3, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackPIDParams(&minfoPIDParams, &menuKp, INFO_LOCATION_PGM);
SubMenuItem menuPIDParams(&minfoPIDParams, &menuBackPIDParams, nullptr, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoSaveValues = { "Save", 14, 0xffff, 0, SavePID };
ActionMenuItem menuSaveValues(&minfoSaveValues, &menuPIDParams, INFO_LOCATION_PGM);
const PROGMEM FloatMenuInfo minfoTicksB = { "Ticks B", 10, 0xffff, 1, ResetTicsB };
FloatMenuItem menuTicksB(&minfoTicksB, 0.0, &menuSaveValues, INFO_LOCATION_PGM);
const PROGMEM FloatMenuInfo minfoTicksA = { "Ticks A", 9, 0xffff, 1, ResetTicsA };
FloatMenuItem menuTicksA(&minfoTicksA, 0.0, &menuTicksB, INFO_LOCATION_PGM);
const PROGMEM FloatMenuInfo minfoSpeedB = { "Speed B", 2, 0xffff, 3, StopB };
FloatMenuItem menuSpeedB(&minfoSpeedB, 0.0, &menuTicksA, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoSetB = { "SetB", 12, 0xffff, 500, SetSpeedB, -250, 10, "rps" };
AnalogMenuItem menuSetB(&minfoSetB, 250, &menuSpeedB, INFO_LOCATION_PGM);
const PROGMEM FloatMenuInfo minfoSpeedA = { "Speed A", 1, 0xffff, 3, StopA };
FloatMenuItem menuSpeedA(&minfoSpeedA, 0.0, &menuSetB, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoSetA = { "SetA", 11, 0xffff, 500, SetSpeedA, -250, 10, "rps" };
AnalogMenuItem menuSetA(&minfoSetA, 250, &menuSpeedA, INFO_LOCATION_PGM);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).
    setSizeBasedEEPROMStorageEnabled(true);
    menuMgr.setEepromRef(&glArduinoEeprom);
    if(psramFound()) {
        heap_caps_malloc_extmem_enable(512);
        Serial.println("PSRAM initialized");
    }   
    // Code generated by plugins and new operators.
    gfx.begin();
    renderer.setUpdatesPerSecond(5);
    switches.init(internalDigitalIo(), SWITCHES_NO_POLLING, true);
    menuMgr.initForEncoder(&renderer, &menuSetA, 2, 15, 13);
    installMonoBorderTitleTheme(renderer, MenuFontDef(nullptr, 1), MenuFontDef(nullptr, 1), true, BaseGraphicalRenderer::TITLE_FIRST_ROW, false);
}

