/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

// Generated for Arduino ESP32 by TcMenu 4.4.0 on 2025-02-28T14:57:33.636210Z.

#include <tcMenu.h>
#include "menu_menu.h"
#include "ThemeMonoBorderedBuilder.h"

// Global variable declarations
const PROGMEM  ConnectorLocalInfo applicationInfo = { "menu", "d0b2be89-7b80-4f3f-9ee8-7e83e5fd65e7" };
ArduinoEEPROMAbstraction glArduinoEeprom(&EEPROM);
U8G2_SH1106_128X64_NONAME_F_HW_I2C gfx(U8G2_R2, U8X8_PIN_NONE, 9, 8);
U8g2Drawable gfxDrawable(&gfx);
GraphicsDeviceRenderer renderer(30, applicationInfo.name, &gfxDrawable);

// Global Menu Item declarations
const PROGMEM AnalogMenuInfo minfoSetYaw = { "Set Yaw", 27, 0xffff, 255, setTargetYawRa, 0, 1, "rps" };
AnalogMenuItem menuSetYaw(&minfoSetYaw, 0, nullptr, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoSetVel = { "Set Vel", 26, 0xffff, 255, setTargetVel, 0, 1, "mps" };
AnalogMenuItem menuSetVel(&minfoSetVel, 0, &menuSetYaw, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoPeriodY = { "Period Y", 33, 34, 1000, setYawPIDPeriod, 0, 1, "ms" };
AnalogMenuItem menuPeriodY(&minfoPeriodY, 0, nullptr, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoKdYaw = { "Kd Yaw", 22, 32, 500, SetKdYaw, 0, 10, "" };
AnalogMenuItem menuKdYaw(&minfoKdYaw, 20, &menuPeriodY, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoKiYaw = { "Ki Yaw", 21, 30, 500, SetKiYaw, 0, 10, "" };
AnalogMenuItem menuKiYaw(&minfoKiYaw, 5, &menuKdYaw, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoKpYaw = { "Kp Yaw", 20, 28, 500, SetKpYaw, 0, 10, "" };
AnalogMenuItem menuKpYaw(&minfoKpYaw, 200, &menuKiYaw, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoVelPID1 = { "Vel PID1", 19, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackVelPID1(&minfoVelPID1, &menuKpYaw, INFO_LOCATION_PGM);
SubMenuItem menuVelPID1(&minfoVelPID1, &menuBackVelPID1, &menuSetVel, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoPeriodV = { "Period V", 32, 26, 1000, setVelPIDPeriod, 0, 1, "ms" };
AnalogMenuItem menuPeriodV(&minfoPeriodV, 0, nullptr, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoKdVel = { "Kd vel", 18, 24, 700, SetKdVel, 0, 10, "" };
AnalogMenuItem menuKdVel(&minfoKdVel, 200, &menuPeriodV, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoKiVel = { "Ki vel", 17, 22, 700, SetKiVel, 0, 10, "" };
AnalogMenuItem menuKiVel(&minfoKiVel, 5, &menuKdVel, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoKpVel = { "Kp vel", 16, 20, 700, SetKpVel, 0, 10, "" };
AnalogMenuItem menuKpVel(&minfoKpVel, 200, &menuKiVel, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoVelPID = { "Vel PID", 15, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackVelPID(&minfoVelPID, &menuKpVel, INFO_LOCATION_PGM);
SubMenuItem menuVelPID(&minfoVelPID, &menuBackVelPID, &menuVelPID1, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoPeriodP = { "Period P", 31, 18, 1000, setPitchPIDPeriod, 0, 1, "ms" };
AnalogMenuItem menuPeriodP(&minfoPeriodP, 0, nullptr, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoKdPitch = { "Kd pitch", 6, 16, 700, SetKdPitch, 0, 10, "" };
AnalogMenuItem menuKdPitch(&minfoKdPitch, 5, &menuPeriodP, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoKiPitch = { "Ki pitch", 5, 14, 700, SetKiPitch, 0, 10, "" };
AnalogMenuItem menuKiPitch(&minfoKiPitch, 200, &menuKdPitch, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoKpPitch = { "Kp pitch", 4, 12, 700, SetKpPitch, 0, 10, "" };
AnalogMenuItem menuKpPitch(&minfoKpPitch, 300, &menuKiPitch, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoPitchPID = { "Pitch PID", 3, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackPitchPID(&minfoPitchPID, &menuKpPitch, INFO_LOCATION_PGM);
SubMenuItem menuPitchPID(&minfoPitchPID, &menuBackPitchPID, &menuVelPID, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoBNOCalib = { "BNO calib.", 29, 0xffff, 3, getBNOCalib, 0, 1, "" };
AnalogMenuItem menuBNOCalib(&minfoBNOCalib, 0, nullptr, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoState = { "State", 28, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackState(&minfoState, &menuBNOCalib, INFO_LOCATION_PGM);
SubMenuItem menuState(&minfoState, &menuBackState, &menuPitchPID, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoSaveValues = { "Save", 14, 0xffff, 0, SavePID };
ActionMenuItem menuSaveValues(&minfoSaveValues, &menuState, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoPitchOfset = { "Pitch Ofset", 30, 10, 1000, SetPitchOfset, -500, 100, "deg" };
AnalogMenuItem menuPitchOfset(&minfoPitchOfset, 500, &menuSaveValues, INFO_LOCATION_PGM);
const PROGMEM FloatMenuInfo minfoYawRate = { "Yaw Rate", 25, 0xffff, 3, NO_CALLBACK };
FloatMenuItem menuYawRate(&minfoYawRate, 0.0, &menuPitchOfset, INFO_LOCATION_PGM);
const PROGMEM FloatMenuInfo minfoVel = { "Vel", 24, 0xffff, 3, NO_CALLBACK };
FloatMenuItem menuVel(&minfoVel, 0.0, &menuYawRate, INFO_LOCATION_PGM);
const PROGMEM FloatMenuInfo minfoPitch = { "Pitch", 23, 0xffff, 3, NO_CALLBACK };
FloatMenuItem menuPitch(&minfoPitch, 0.0, &menuVel, INFO_LOCATION_PGM);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).
    setSizeBasedEEPROMStorageEnabled(true);
    menuMgr.setEepromRef(&glArduinoEeprom);
    // Now add any readonly, non-remote and visible flags.
    menuPitch.setReadOnly(true);
    menuVel.setReadOnly(true);
    menuYawRate.setReadOnly(true);
    menuBNOCalib.setReadOnly(true);

    // Code generated by plugins and new operators.
    gfx.begin();
    renderer.setUpdatesPerSecond(5);
    switches.init(internalDigitalIo(), SWITCHES_NO_POLLING, true);
    menuMgr.initForEncoder(&renderer, &menuPitch, 47, 21, 45);
    installMonoBorderTitleTheme(renderer, MenuFontDef(nullptr, 1), MenuFontDef(nullptr, 1), true, BaseGraphicalRenderer::TITLE_FIRST_ROW, false);
}

